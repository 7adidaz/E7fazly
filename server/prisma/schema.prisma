generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookmark {
  id           Int            @id @default(autoincrement())
  link         String
  ownerId      Int
  directoryId  Int
  type         bookmark_type
  favorite     Boolean
  directory    directory      @relation(fields: [directoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bookmark_directoryId_fkey")
  user         user           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bookmark_ownerId_fkey")
  bookmark_tag bookmark_tag[]
}

model bookmark_tag {
  bookmarkId Int
  tagId      Int
  bookmark   bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bookmark_tag_bookmarkId_fkey")
  tag        tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "bookmark_tag_tagId_fkey")

  @@id([bookmarkId, tagId])
}

model directory {
  id                                   Int                     @id @default(autoincrement())
  parentId                             Int?
  name                                 String                  @db.VarChar(255)
  icon                                 String
  ownerId                              Int
  bookmark                             bookmark[]
  user_directory_ownerIdTouser         user                    @relation("directory_ownerIdTouser", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directory_ownerId_fkey")
  directory                            directory?              @relation("directoryTodirectory", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directory_parentId_fkey")
  other_directory                      directory[]             @relation("directoryTodirectory")
  user_user_baseDirectoryIdTodirectory user[]                  @relation("user_baseDirectoryIdTodirectory")
  user_directory_access                user_directory_access[]
}

model tag {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  ownerId      Int
  bookmark_tag bookmark_tag[]
  user         user           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "ownerId")
}

model user {
  id                                        Int                     @id @default(autoincrement())
  name                                      String                  @db.VarChar(255)
  email                                     String                  @db.VarChar(255)
  password                                  String                  @db.VarChar(255)
  baseDirectoryId                           Int?
  isVerified                                Boolean
  verificationCode                          Int
  bookmark                                  bookmark[]
  directory_directory_ownerIdTouser         directory[]             @relation("directory_ownerIdTouser")
  tag                                       tag[]
  directory_user_baseDirectoryIdTodirectory directory?              @relation("user_baseDirectoryIdTodirectory", fields: [baseDirectoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_baseDirectoryId")
  user_directory_access                     user_directory_access[]
}

model user_directory_access {
  directoryId Int
  userId      Int
  userRights  access_rights
  directory   directory     @relation(fields: [directoryId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_directory_access_directoryId_fkey")
  user        user          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_directory_access_userId_fkey")

  @@id([userId, directoryId])
}

enum access_rights {
  edit
  view
}

enum bookmark_type {
  link
  img
  etc
}
